// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4bfd1b6eDecodeGithubComGeoIrbTochkaTestPkgModels(in *jlexer.Lexer, out *Rss) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "News":
			if in.IsNull() {
				in.Skip()
				out.News = nil
			} else {
				in.Delim('[')
				if out.News == nil {
					if !in.IsDelim(']') {
						out.News = make([]News, 0, 2)
					} else {
						out.News = []News{}
					}
				} else {
					out.News = (out.News)[:0]
				}
				for !in.IsDelim(']') {
					var v1 News
					(v1).UnmarshalEasyJSON(in)
					out.News = append(out.News, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4bfd1b6eEncodeGithubComGeoIrbTochkaTestPkgModels(out *jwriter.Writer, in Rss) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"News\":"
		out.RawString(prefix[1:])
		if in.News == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.News {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Rss) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4bfd1b6eEncodeGithubComGeoIrbTochkaTestPkgModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Rss) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4bfd1b6eEncodeGithubComGeoIrbTochkaTestPkgModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Rss) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4bfd1b6eDecodeGithubComGeoIrbTochkaTestPkgModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Rss) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4bfd1b6eDecodeGithubComGeoIrbTochkaTestPkgModels(l, v)
}
func easyjson4bfd1b6eDecodeGithubComGeoIrbTochkaTestPkgModels1(in *jlexer.Lexer, out *News) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "pubDate":
			out.PubDate = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4bfd1b6eEncodeGithubComGeoIrbTochkaTestPkgModels1(out *jwriter.Writer, in News) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"pubDate\":"
		out.RawString(prefix)
		out.String(string(in.PubDate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v News) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4bfd1b6eEncodeGithubComGeoIrbTochkaTestPkgModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v News) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4bfd1b6eEncodeGithubComGeoIrbTochkaTestPkgModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *News) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4bfd1b6eDecodeGithubComGeoIrbTochkaTestPkgModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *News) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4bfd1b6eDecodeGithubComGeoIrbTochkaTestPkgModels1(l, v)
}
