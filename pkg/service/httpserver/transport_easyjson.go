// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package httpserver

import (
	json "encoding/json"
	models "github.com/GeoIrb/tochka-test/pkg/models"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC87d08bdDecodeGithubComGeoIrbTochkaTestPkgServiceHttpserver(in *jlexer.Lexer, out *getNewsTransport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC87d08bdEncodeGithubComGeoIrbTochkaTestPkgServiceHttpserver(out *jwriter.Writer, in getNewsTransport) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v getNewsTransport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC87d08bdEncodeGithubComGeoIrbTochkaTestPkgServiceHttpserver(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v getNewsTransport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC87d08bdEncodeGithubComGeoIrbTochkaTestPkgServiceHttpserver(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *getNewsTransport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC87d08bdDecodeGithubComGeoIrbTochkaTestPkgServiceHttpserver(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *getNewsTransport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC87d08bdDecodeGithubComGeoIrbTochkaTestPkgServiceHttpserver(l, v)
}
func easyjsonC87d08bdDecodeGithubComGeoIrbTochkaTestPkgServiceHttpserver1(in *jlexer.Lexer, out *getNewsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "news":
			if in.IsNull() {
				in.Skip()
				out.News = nil
			} else {
				in.Delim('[')
				if out.News == nil {
					if !in.IsDelim(']') {
						out.News = make([]models.News, 0, 2)
					} else {
						out.News = []models.News{}
					}
				} else {
					out.News = (out.News)[:0]
				}
				for !in.IsDelim(']') {
					var v1 models.News
					(v1).UnmarshalEasyJSON(in)
					out.News = append(out.News, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC87d08bdEncodeGithubComGeoIrbTochkaTestPkgServiceHttpserver1(out *jwriter.Writer, in getNewsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"news\":"
		out.RawString(prefix[1:])
		if in.News == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.News {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v getNewsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC87d08bdEncodeGithubComGeoIrbTochkaTestPkgServiceHttpserver1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v getNewsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC87d08bdEncodeGithubComGeoIrbTochkaTestPkgServiceHttpserver1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *getNewsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC87d08bdDecodeGithubComGeoIrbTochkaTestPkgServiceHttpserver1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *getNewsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC87d08bdDecodeGithubComGeoIrbTochkaTestPkgServiceHttpserver1(l, v)
}
func easyjsonC87d08bdDecodeGithubComGeoIrbTochkaTestPkgServiceHttpserver2(in *jlexer.Lexer, out *stopTrackingTransport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC87d08bdEncodeGithubComGeoIrbTochkaTestPkgServiceHttpserver2(out *jwriter.Writer, in stopTrackingTransport) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v stopTrackingTransport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC87d08bdEncodeGithubComGeoIrbTochkaTestPkgServiceHttpserver2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v stopTrackingTransport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC87d08bdEncodeGithubComGeoIrbTochkaTestPkgServiceHttpserver2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *stopTrackingTransport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC87d08bdDecodeGithubComGeoIrbTochkaTestPkgServiceHttpserver2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *stopTrackingTransport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC87d08bdDecodeGithubComGeoIrbTochkaTestPkgServiceHttpserver2(l, v)
}
func easyjsonC87d08bdDecodeGithubComGeoIrbTochkaTestPkgServiceHttpserver3(in *jlexer.Lexer, out *stopTrackingRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC87d08bdEncodeGithubComGeoIrbTochkaTestPkgServiceHttpserver3(out *jwriter.Writer, in stopTrackingRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v stopTrackingRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC87d08bdEncodeGithubComGeoIrbTochkaTestPkgServiceHttpserver3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v stopTrackingRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC87d08bdEncodeGithubComGeoIrbTochkaTestPkgServiceHttpserver3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *stopTrackingRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC87d08bdDecodeGithubComGeoIrbTochkaTestPkgServiceHttpserver3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *stopTrackingRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC87d08bdDecodeGithubComGeoIrbTochkaTestPkgServiceHttpserver3(l, v)
}
func easyjsonC87d08bdDecodeGithubComGeoIrbTochkaTestPkgServiceHttpserver4(in *jlexer.Lexer, out *startTrackingTransport) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC87d08bdEncodeGithubComGeoIrbTochkaTestPkgServiceHttpserver4(out *jwriter.Writer, in startTrackingTransport) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v startTrackingTransport) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC87d08bdEncodeGithubComGeoIrbTochkaTestPkgServiceHttpserver4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v startTrackingTransport) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC87d08bdEncodeGithubComGeoIrbTochkaTestPkgServiceHttpserver4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *startTrackingTransport) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC87d08bdDecodeGithubComGeoIrbTochkaTestPkgServiceHttpserver4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *startTrackingTransport) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC87d08bdDecodeGithubComGeoIrbTochkaTestPkgServiceHttpserver4(l, v)
}
func easyjsonC87d08bdDecodeGithubComGeoIrbTochkaTestPkgServiceHttpserver5(in *jlexer.Lexer, out *startTrackingRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "format":
			out.Format = string(in.String())
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC87d08bdEncodeGithubComGeoIrbTochkaTestPkgServiceHttpserver5(out *jwriter.Writer, in startTrackingRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"format\":"
		out.RawString(prefix[1:])
		out.String(string(in.Format))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v startTrackingRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC87d08bdEncodeGithubComGeoIrbTochkaTestPkgServiceHttpserver5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v startTrackingRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC87d08bdEncodeGithubComGeoIrbTochkaTestPkgServiceHttpserver5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *startTrackingRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC87d08bdDecodeGithubComGeoIrbTochkaTestPkgServiceHttpserver5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *startTrackingRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC87d08bdDecodeGithubComGeoIrbTochkaTestPkgServiceHttpserver5(l, v)
}
